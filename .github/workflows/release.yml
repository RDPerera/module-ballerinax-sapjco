name: Publish Release

on:
  workflow_dispatch:
  repository_dispatch:
    types: [stdlib-release-pipeline]

jobs:
  publish-release:
    name: Release Package
    runs-on: ubuntu-latest
    if: github.repository_owner == 'ballerina-platform'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: jco

      - name: Get Ballerina Version
        run: |
          BAL_VERSION=$(grep -w 'ballerinaLangVersion' gradle.properties | cut -d= -f2 | rev | cut --complement -d- -f1 | rev) 
          if [ -z "$BAL_VERSION" ]; then
            BAL_VERSION="latest"
          fi
          echo "BAL_VERSION=$BAL_VERSION" >> $GITHUB_ENV
          echo "Ballerina Version: $BAL_VERSION"
        working-directory: jco

      - name: Set Up Ballerina
        uses: ballerina-platform/setup-ballerina@v1.1.0
        with:
          version: ${{ env.BAL_VERSION }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 17.0.7

      - name: Clone lib repo
        uses: actions/checkout@v4
        with:
          repository: wso2-enterprise/wso2-sap-resources
          token: ${{ secrets.BALLERINA_BOT_TOKEN }}
          path: libs

      - name: Copy Libs to SAP Connector Directory
        run: |
          cp -r libs/ballerina_resources/lib/. jco/native/libs/

      - name: Build without Tests
        env:
          packageUser: ${{ github.actor }}
          packagePAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name ${{ secrets.BALLERINA_BOT_USERNAME }}
          git config --global user.email ${{ secrets.BALLERINA_BOT_EMAIL }}
          ./gradlew build -x test
        working-directory: jco

      - name: Create lib Directory if not Exists
        run: |
          mkdir -p ballerina/lib
        working-directory: jco

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "rootfs"
          scan-ref: "/github/workspace/jco/ballerina/lib"
          format: "table"
          timeout: "10m0s"
          exit-code: "1"
          skip-dirs: "examples"

      - name: Get Release Version
        run: |
          echo "VERSION=$((grep -w 'version' | cut -d= -f2) < gradle.properties | rev | cut -d- -f2 | rev)" >> $GITHUB_ENV
        working-directory: jco

      - name: Checkout to Release Branch
        run: |
          echo "Version: ${VERSION}"
          git checkout -b release-${VERSION}
        working-directory: jco

      - name: Remove Target Directory
        run: |
          sudo rm -rf ballerina/target
          sudo rm -rf ballerina/build
        working-directory: jco
  
      - name: Publish Package
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
          BALLERINA_CENTRAL_ACCESS_TOKEN: ${{ secrets.BALLERINA_CENTRAL_ACCESS_TOKEN }}
          packageUser: ${{ secrets.BALLERINA_BOT_USERNAME }}
          packagePAT: ${{ secrets.BALLERINA_BOT_TOKEN }}
          publishUser: ${{ secrets.BALLERINA_BOT_USERNAME }}
          publishPAT: ${{ secrets.BALLERINA_BOT_TOKEN }}
        run: |
          ./gradlew clean release -Prelease.useAutomaticVersion=true
          ./gradlew -Pversion=${VERSION} publish -x test -PpublishToCentral=true
        working-directory: jco

      - name: GitHub Release and Release Sync PR
        env:
          GITHUB_TOKEN: ${{ secrets.BALLERINA_BOT_TOKEN }}
        run: |
          gh release create v$VERSION --title "module-ballerinax-sap.jco-v$VERSION"
          gh pr create --base ${GITHUB_REF##*/} --title "[Automated] Sync ${GITHUB_REF##*/} after $VERSION release" --body "Sync ${GITHUB_REF##*/} after $VERSION release"
        working-directory: jco
